// The image in the icon file was generated by this shadertoy.
// This is a pixel/fragment shader. Easiest way to edit is to
// copy&paste this code to [shadertoy](https://www.shadertoy.com/new)
// or with vscode shadertoy extension.

float sdcircle(vec2 point, float radius) {
  return length(point) - radius;
}

// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm
float sdsegment(vec2 point, vec2 from, vec2 to) {
  vec2 a = point - from;
  vec2 b = to - from;
  float h = clamp(dot(a, b) / dot(b, b), 0.0, 1.0);
  return length(a - b * h);
}

vec2 rotate(vec2 v, float radians) {
  float c = cos(radians);
  float s = sin(radians);
  return vec2(
    v.x * c - v.y * s,
    v.x * s + v.y * c
  );
}

void mainImage(out vec4 out_color, in vec2 fragment_coords) {
  const float kpi = 3.14159265359;

  // normalize to x = [-aspect, aspect] and y = [-1, 1]
  vec2 uv = fragment_coords / iResolution.xy * 2.0 - 1.0;
  uv.x *= iResolution.x / iResolution.y;
  //uv *= 32.0;

  const float minute_arm_length = 0.78;

  vec4 color = vec4(smoothstep(0.0, 0.05, -sdcircle(uv, 0.98)));

  { // second arm
    vec2 minute = rotate(vec2(minute_arm_length, 0.0), kpi / 2.0);
    float opacity = smoothstep(-0.12, -0.1, -sdsegment(uv, vec2(0.0), minute));
    color.xyz = mix(color.xyz, vec3(1.0, 0.0, 0.0), opacity);
  }

  { // minute arm
    vec2 minute = rotate(vec2(minute_arm_length, 0.0), kpi);
    float opacity = smoothstep(-0.15, -0.12, -sdsegment(uv, vec2(0.0), minute));
    color.xyz = mix(color.xyz, vec3(0.0), opacity);
  }

  { // hour arm
    vec2 hour = rotate(vec2(minute_arm_length * 2.0 / 3.0, 0.0), -kpi / 4.0);
    float opacity = smoothstep(-0.15, -0.12, -sdsegment(uv, vec2(0.0), hour));
    color.xyz = mix(color.xyz, vec3(0.0), opacity);
  }

  out_color = color;
}
